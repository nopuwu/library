{
  "api/library.Server.AuthService.html": {
    "href": "api/library.Server.AuthService.html",
    "title": "Class AuthService | Library",
    "summary": "Class AuthService Namespace library.Server Assembly library.Server.dll public class AuthService Inheritance object AuthService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthService(ApplicationDbContext, IConfiguration) public AuthService(ApplicationDbContext context, IConfiguration configuration) Parameters context ApplicationDbContext configuration IConfiguration Methods Authenticate(string, string) public Task<User> Authenticate(string username, string password) Parameters username string password string Returns Task<User> GenerateToken(User) public Task<string> GenerateToken(User user) Parameters user User Returns Task<string>"
  },
  "api/library.Server.Class.html": {
    "href": "api/library.Server.Class.html",
    "title": "Class Class | Library",
    "summary": "Class Class Namespace library.Server Assembly library.Server.dll public class Class Inheritance object Class Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/library.Server.Controllers.AuthController.html": {
    "href": "api/library.Server.Controllers.AuthController.html",
    "title": "Class AuthController | Library",
    "summary": "Class AuthController Namespace library.Server.Controllers Assembly library.Server.dll [Route(\"api/[controller]\")] [ApiController] public class AuthController : ControllerBase Inheritance object ControllerBase AuthController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthController(AuthService, ApplicationDbContext) public AuthController(AuthService authService, ApplicationDbContext context) Parameters authService AuthService context ApplicationDbContext Methods GetCurrentUser() [HttpGet(\"me\")] [Authorize] public IActionResult GetCurrentUser() Returns IActionResult Login(LoginDto) [HttpPost(\"login\")] [AllowAnonymous] public Task<IActionResult> Login(LoginDto loginDto) Parameters loginDto LoginDto Returns Task<IActionResult> Register(RegisterDto) [HttpPost(\"register\")] [AllowAnonymous] public Task<IActionResult> Register(RegisterDto model) Parameters model RegisterDto Returns Task<IActionResult>"
  },
  "api/library.Server.Controllers.BooksController.html": {
    "href": "api/library.Server.Controllers.BooksController.html",
    "title": "Class BooksController | Library",
    "summary": "Class BooksController Namespace library.Server.Controllers Assembly library.Server.dll [Route(\"api/[controller]\")] [ApiController] public class BooksController : ControllerBase Inheritance object ControllerBase BooksController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BooksController(ApplicationDbContext) public BooksController(ApplicationDbContext context) Parameters context ApplicationDbContext Methods CreateBook(CreateBookRequest) [HttpPost] [Authorize(Policy = \"RequireAdminOrLibrarian\")] public Task<ActionResult<BookDto>> CreateBook(CreateBookRequest bookRequest) Parameters bookRequest CreateBookRequest Returns Task<ActionResult<BookDto>> DeleteBook(int) [HttpDelete(\"{id}\")] [Authorize(Policy = \"RequireAdminOrLibrarian\")] public Task<IActionResult> DeleteBook(int id) Parameters id int Returns Task<IActionResult> GetBook(int) [HttpGet(\"{id}\")] public Task<ActionResult<Book>> GetBook(int id) Parameters id int Returns Task<ActionResult<Book>> GetBooks() [HttpGet] public Task<ActionResult<IEnumerable<Book>>> GetBooks() Returns Task<ActionResult<IEnumerable<Book>>> UpdateBook(int, BookDto) [HttpPut(\"{id}\")] [Authorize(Policy = \"RequireAdminOrLibrarian\")] public Task<IActionResult> UpdateBook(int id, BookDto updatedBook) Parameters id int updatedBook BookDto Returns Task<IActionResult>"
  },
  "api/library.Server.Controllers.BorrowsController.html": {
    "href": "api/library.Server.Controllers.BorrowsController.html",
    "title": "Class BorrowsController | Library",
    "summary": "Class BorrowsController Namespace library.Server.Controllers Assembly library.Server.dll [Route(\"api/[controller]\")] [ApiController] public class BorrowsController : ControllerBase Inheritance object ControllerBase BorrowsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BorrowsController(ApplicationDbContext) public BorrowsController(ApplicationDbContext context) Parameters context ApplicationDbContext Methods DeleteBorrow(int) [HttpDelete(\"{id}\")] [Authorize] public Task<IActionResult> DeleteBorrow(int id) Parameters id int Returns Task<IActionResult> GetBorrow(int) [HttpGet(\"{id}\")] public Task<ActionResult<Borrow>> GetBorrow(int id) Parameters id int Returns Task<ActionResult<Borrow>> GetBorrowings() [HttpGet] [Authorize(Policy = \"RequireAdminOrLibrarian\")] public Task<ActionResult<IEnumerable<Borrow>>> GetBorrowings() Returns Task<ActionResult<IEnumerable<Borrow>>> GetUserBorrows() [HttpGet(\"user\")] [Authorize] public Task<ActionResult<IEnumerable<UserBorrowDto>>> GetUserBorrows() Returns Task<ActionResult<IEnumerable<UserBorrowDto>>> PostBorrow(int) [HttpPost(\"{bookId:int}\")] [Authorize] public Task<IActionResult> PostBorrow(int bookId) Parameters bookId int Returns Task<IActionResult> ReturnBook(int) [HttpPut(\"return/{id}\")] [Authorize(Policy = \"RequireAdminOrLibrarian\")] public Task<IActionResult> ReturnBook(int id) Parameters id int Returns Task<IActionResult>"
  },
  "api/library.Server.Controllers.LogsController.html": {
    "href": "api/library.Server.Controllers.LogsController.html",
    "title": "Class LogsController | Library",
    "summary": "Class LogsController Namespace library.Server.Controllers Assembly library.Server.dll [Route(\"api/[controller]\")] [ApiController] public class LogsController : ControllerBase Inheritance object ControllerBase LogsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LogsController(ApplicationDbContext) public LogsController(ApplicationDbContext context) Parameters context ApplicationDbContext Methods DeleteLog(int) [HttpDelete(\"{id}\")] public Task<IActionResult> DeleteLog(int id) Parameters id int Returns Task<IActionResult> GetLog(int) [HttpGet(\"{id}\")] public Task<ActionResult<Log>> GetLog(int id) Parameters id int Returns Task<ActionResult<Log>> GetLogs() [HttpGet] public Task<ActionResult<IEnumerable<Log>>> GetLogs() Returns Task<ActionResult<IEnumerable<Log>>> PostLog(Log) [HttpPost] public Task<ActionResult<Log>> PostLog(Log log) Parameters log Log Returns Task<ActionResult<Log>> PutLog(int, Log) [HttpPut(\"{id}\")] public Task<IActionResult> PutLog(int id, Log log) Parameters id int log Log Returns Task<IActionResult>"
  },
  "api/library.Server.Controllers.ReservationsController.html": {
    "href": "api/library.Server.Controllers.ReservationsController.html",
    "title": "Class ReservationsController | Library",
    "summary": "Class ReservationsController Namespace library.Server.Controllers Assembly library.Server.dll [Route(\"api/[controller]\")] [ApiController] public class ReservationsController : ControllerBase Inheritance object ControllerBase ReservationsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReservationsController(ApplicationDbContext) public ReservationsController(ApplicationDbContext context) Parameters context ApplicationDbContext Methods DeleteReservation(int) [HttpDelete(\"{id}\")] [Authorize] public Task<IActionResult> DeleteReservation(int id) Parameters id int Returns Task<IActionResult> GetReservation(int) [HttpGet(\"{id}\")] [Authorize(Policy = \"RequireAdminOrLibrarian\")] public Task<ActionResult<Reservation>> GetReservation(int id) Parameters id int Returns Task<ActionResult<Reservation>> GetReservations() [HttpGet] [Authorize(Policy = \"RequireAdminOrLibrarian\")] public Task<ActionResult<IEnumerable<Reservation>>> GetReservations() Returns Task<ActionResult<IEnumerable<Reservation>>> GetUserReservations() [HttpGet(\"user\")] [Authorize] public Task<ActionResult<IEnumerable<UserReservationDto>>> GetUserReservations() Returns Task<ActionResult<IEnumerable<UserReservationDto>>> PostReservation(int) [HttpPost(\"{bookId:int}\")] [Authorize] public Task<ActionResult<Reservation>> PostReservation(int bookId) Parameters bookId int Returns Task<ActionResult<Reservation>>"
  },
  "api/library.Server.Controllers.UsersController.html": {
    "href": "api/library.Server.Controllers.UsersController.html",
    "title": "Class UsersController | Library",
    "summary": "Class UsersController Namespace library.Server.Controllers Assembly library.Server.dll [Route(\"api/[controller]\")] [ApiController] public class UsersController : ControllerBase Inheritance object ControllerBase UsersController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UsersController(UserManager<IdentityUser>, ApplicationDbContext) public UsersController(UserManager<IdentityUser> userManager, ApplicationDbContext context) Parameters userManager UserManager<IdentityUser> context ApplicationDbContext Methods DeleteUser(int) [HttpDelete(\"{id}\")] [Authorize(Policy = \"RequireAdminOrLibrarian\")] public Task<IActionResult> DeleteUser(int id) Parameters id int Returns Task<IActionResult> GetUser(int) [HttpGet(\"{id}\")] [Authorize(Policy = \"RequireAdminOrLibrarian\")] public Task<ActionResult<User>> GetUser(int id) Parameters id int Returns Task<ActionResult<User>> GetUsers() [HttpGet] [Authorize(Policy = \"RequireAdminOrLibrarian\")] public Task<ActionResult<IEnumerable<User>>> GetUsers() Returns Task<ActionResult<IEnumerable<User>>> PutUser(int, UpdateUserDto) [HttpPut(\"{id}\")] [Authorize(Policy = \"RequireAdminOrLibrarian\")] public Task<IActionResult> PutUser(int id, UpdateUserDto updateUserDto) Parameters id int updateUserDto UpdateUserDto Returns Task<IActionResult>"
  },
  "api/library.Server.Controllers.html": {
    "href": "api/library.Server.Controllers.html",
    "title": "Namespace library.Server.Controllers | Library",
    "summary": "Namespace library.Server.Controllers Classes AuthController BooksController BorrowsController LogsController ReservationsController UsersController"
  },
  "api/library.Server.Data.ApplicationDbContext.html": {
    "href": "api/library.Server.Data.ApplicationDbContext.html",
    "title": "Class ApplicationDbContext | Library",
    "summary": "Class ApplicationDbContext Namespace library.Server.Data Assembly library.Server.dll public class ApplicationDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext ApplicationDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.OnModelCreating(ModelBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationDbContext(DbContextOptions<ApplicationDbContext>) public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) Parameters options DbContextOptions<ApplicationDbContext> Properties BookCopies public DbSet<BookCopy> BookCopies { get; set; } Property Value DbSet<BookCopy> Books public DbSet<Book> Books { get; set; } Property Value DbSet<Book> Borrowings public DbSet<Borrow> Borrowings { get; set; } Property Value DbSet<Borrow> DbPath public string DbPath { get; } Property Value string Logs public DbSet<Log> Logs { get; set; } Property Value DbSet<Log> Reservations public DbSet<Reservation> Reservations { get; set; } Property Value DbSet<Reservation> Users public DbSet<User> Users { get; set; } Property Value DbSet<User> Methods OnConfiguring(DbContextOptionsBuilder) Override this method to configure the database (and other options) to be used for this context. This method is called for each instance of the context that is created. The base implementation does nothing. protected override void OnConfiguring(DbContextOptionsBuilder options) Parameters options DbContextOptionsBuilder Remarks In situations where an instance of DbContextOptions may or may not have been passed to the constructor, you can use IsConfigured to determine if the options have already been set, and skip some or all of the logic in OnConfiguring(DbContextOptionsBuilder). See DbContext lifetime, configuration, and initialization for more information and examples."
  },
  "api/library.Server.Data.html": {
    "href": "api/library.Server.Data.html",
    "title": "Namespace library.Server.Data | Library",
    "summary": "Namespace library.Server.Data Classes ApplicationDbContext"
  },
  "api/library.Server.Dtos.Account.NewUserDto.html": {
    "href": "api/library.Server.Dtos.Account.NewUserDto.html",
    "title": "Class NewUserDto | Library",
    "summary": "Class NewUserDto Namespace library.Server.Dtos.Account Assembly library.Server.dll public class NewUserDto Inheritance object NewUserDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email public string Email { get; set; } Property Value string Id public int Id { get; set; } Property Value int Token public string Token { get; set; } Property Value string Username public string Username { get; set; } Property Value string"
  },
  "api/library.Server.Dtos.Account.UpdateUserDto.html": {
    "href": "api/library.Server.Dtos.Account.UpdateUserDto.html",
    "title": "Class UpdateUserDto | Library",
    "summary": "Class UpdateUserDto Namespace library.Server.Dtos.Account Assembly library.Server.dll public class UpdateUserDto Inheritance object UpdateUserDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties email public string email { get; set; } Property Value string username public string username { get; set; } Property Value string"
  },
  "api/library.Server.Dtos.Account.html": {
    "href": "api/library.Server.Dtos.Account.html",
    "title": "Namespace library.Server.Dtos.Account | Library",
    "summary": "Namespace library.Server.Dtos.Account Classes NewUserDto UpdateUserDto"
  },
  "api/library.Server.Dtos.AccountDto.LoginDto.html": {
    "href": "api/library.Server.Dtos.AccountDto.LoginDto.html",
    "title": "Class LoginDto | Library",
    "summary": "Class LoginDto Namespace library.Server.Dtos.AccountDto Assembly library.Server.dll public class LoginDto Inheritance object LoginDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Password [Required] public string Password { get; set; } Property Value string Username [Required] public string Username { get; set; } Property Value string"
  },
  "api/library.Server.Dtos.AccountDto.RegisterDto.html": {
    "href": "api/library.Server.Dtos.AccountDto.RegisterDto.html",
    "title": "Class RegisterDto | Library",
    "summary": "Class RegisterDto Namespace library.Server.Dtos.AccountDto Assembly library.Server.dll public class RegisterDto Inheritance object RegisterDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email [Required] [EmailAddress] public string Email { get; set; } Property Value string Password [Required] [MinLength(6)] public string Password { get; set; } Property Value string Username [Required] public string Username { get; set; } Property Value string"
  },
  "api/library.Server.Dtos.AccountDto.html": {
    "href": "api/library.Server.Dtos.AccountDto.html",
    "title": "Namespace library.Server.Dtos.AccountDto | Library",
    "summary": "Namespace library.Server.Dtos.AccountDto Classes LoginDto RegisterDto"
  },
  "api/library.Server.Dtos.Book.CreateBookRequest.html": {
    "href": "api/library.Server.Dtos.Book.CreateBookRequest.html",
    "title": "Class CreateBookRequest | Library",
    "summary": "Class CreateBookRequest Namespace library.Server.Dtos.Book Assembly library.Server.dll public class CreateBookRequest Inheritance object CreateBookRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Book public BookDto Book { get; set; } Property Value BookDto CopyCount public int CopyCount { get; set; } Property Value int"
  },
  "api/library.Server.Dtos.Book.html": {
    "href": "api/library.Server.Dtos.Book.html",
    "title": "Namespace library.Server.Dtos.Book | Library",
    "summary": "Namespace library.Server.Dtos.Book Classes CreateBookRequest"
  },
  "api/library.Server.Dtos.BookDto.html": {
    "href": "api/library.Server.Dtos.BookDto.html",
    "title": "Class BookDto | Library",
    "summary": "Class BookDto Namespace library.Server.Dtos Assembly library.Server.dll public class BookDto Inheritance object BookDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author public required string Author { get; set; } Property Value string Genre public required string Genre { get; set; } Property Value string Isbn public required string Isbn { get; set; } Property Value string Title public required string Title { get; set; } Property Value string"
  },
  "api/library.Server.Dtos.Borrow.CreateBorrowDto.html": {
    "href": "api/library.Server.Dtos.Borrow.CreateBorrowDto.html",
    "title": "Class CreateBorrowDto | Library",
    "summary": "Class CreateBorrowDto Namespace library.Server.Dtos.Borrow Assembly library.Server.dll public class CreateBorrowDto Inheritance object CreateBorrowDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BorrowDate public DateTime BorrowDate { get; set; } Property Value DateTime CopyId public int CopyId { get; set; } Property Value int ReturnDate public DateTime ReturnDate { get; set; } Property Value DateTime Status public int Status { get; set; } Property Value int UserId public int UserId { get; set; } Property Value int"
  },
  "api/library.Server.Dtos.Borrow.UserBorrowDto.html": {
    "href": "api/library.Server.Dtos.Borrow.UserBorrowDto.html",
    "title": "Class UserBorrowDto | Library",
    "summary": "Class UserBorrowDto Namespace library.Server.Dtos.Borrow Assembly library.Server.dll public class UserBorrowDto Inheritance object UserBorrowDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author public string Author { get; set; } Property Value string BorrowDate public DateTime BorrowDate { get; set; } Property Value DateTime Id public int Id { get; set; } Property Value int ReturnDate public DateTime? ReturnDate { get; set; } Property Value DateTime? Title public string Title { get; set; } Property Value string"
  },
  "api/library.Server.Dtos.Borrow.html": {
    "href": "api/library.Server.Dtos.Borrow.html",
    "title": "Namespace library.Server.Dtos.Borrow | Library",
    "summary": "Namespace library.Server.Dtos.Borrow Classes CreateBorrowDto UserBorrowDto"
  },
  "api/library.Server.Dtos.RegisterRequestDto.html": {
    "href": "api/library.Server.Dtos.RegisterRequestDto.html",
    "title": "Class RegisterRequestDto | Library",
    "summary": "Class RegisterRequestDto Namespace library.Server.Dtos Assembly library.Server.dll public class RegisterRequestDto Inheritance object RegisterRequestDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email public string Email { get; set; } Property Value string Password public string Password { get; set; } Property Value string Username public string Username { get; set; } Property Value string"
  },
  "api/library.Server.Dtos.Reservation.CreateReservationDto.html": {
    "href": "api/library.Server.Dtos.Reservation.CreateReservationDto.html",
    "title": "Class CreateReservationDto | Library",
    "summary": "Class CreateReservationDto Namespace library.Server.Dtos.Reservation Assembly library.Server.dll public class CreateReservationDto Inheritance object CreateReservationDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BookCopyId public int BookCopyId { get; set; } Property Value int Id public int Id { get; set; } Property Value int ReservationDate public DateTime ReservationDate { get; set; } Property Value DateTime UserId public int UserId { get; set; } Property Value int"
  },
  "api/library.Server.Dtos.Reservation.UserReservationDto.html": {
    "href": "api/library.Server.Dtos.Reservation.UserReservationDto.html",
    "title": "Class UserReservationDto | Library",
    "summary": "Class UserReservationDto Namespace library.Server.Dtos.Reservation Assembly library.Server.dll public class UserReservationDto Inheritance object UserReservationDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author public string Author { get; set; } Property Value string Id public int Id { get; set; } Property Value int ReservationDate public DateTime ReservationDate { get; set; } Property Value DateTime Title public string Title { get; set; } Property Value string"
  },
  "api/library.Server.Dtos.Reservation.html": {
    "href": "api/library.Server.Dtos.Reservation.html",
    "title": "Namespace library.Server.Dtos.Reservation | Library",
    "summary": "Namespace library.Server.Dtos.Reservation Classes CreateReservationDto UserReservationDto"
  },
  "api/library.Server.Dtos.html": {
    "href": "api/library.Server.Dtos.html",
    "title": "Namespace library.Server.Dtos | Library",
    "summary": "Namespace library.Server.Dtos Classes BookDto RegisterRequestDto"
  },
  "api/library.Server.Interfaces.IOpenLibraryService.html": {
    "href": "api/library.Server.Interfaces.IOpenLibraryService.html",
    "title": "Class IOpenLibraryService | Library",
    "summary": "Class IOpenLibraryService Namespace library.Server.Interfaces Assembly library.Server.dll public class IOpenLibraryService Inheritance object IOpenLibraryService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/library.Server.Interfaces.html": {
    "href": "api/library.Server.Interfaces.html",
    "title": "Namespace library.Server.Interfaces | Library",
    "summary": "Namespace library.Server.Interfaces Classes IOpenLibraryService"
  },
  "api/library.Server.Mappers.BorrowMapper.html": {
    "href": "api/library.Server.Mappers.BorrowMapper.html",
    "title": "Class BorrowMapper | Library",
    "summary": "Class BorrowMapper Namespace library.Server.Mappers Assembly library.Server.dll public static class BorrowMapper Inheritance object BorrowMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MapToDto(Borrow) public static CreateBorrowDto MapToDto(this Borrow borrow) Parameters borrow Borrow Returns CreateBorrowDto"
  },
  "api/library.Server.Mappers.ReservationMapper.html": {
    "href": "api/library.Server.Mappers.ReservationMapper.html",
    "title": "Class ReservationMapper | Library",
    "summary": "Class ReservationMapper Namespace library.Server.Mappers Assembly library.Server.dll public static class ReservationMapper Inheritance object ReservationMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MapToDto(Reservation) public static CreateReservationDto MapToDto(this Reservation reservation) Parameters reservation Reservation Returns CreateReservationDto"
  },
  "api/library.Server.Mappers.html": {
    "href": "api/library.Server.Mappers.html",
    "title": "Namespace library.Server.Mappers | Library",
    "summary": "Namespace library.Server.Mappers Classes BorrowMapper ReservationMapper"
  },
  "api/library.Server.Migrations.ModifyStructure.html": {
    "href": "api/library.Server.Migrations.ModifyStructure.html",
    "title": "Class ModifyStructure | Library",
    "summary": "Class ModifyStructure Namespace library.Server.Migrations Assembly library.Server.dll A base class inherited by each EF Core migration. [DbContext(typeof(ApplicationDbContext))] [Migration(\"20250609174216_ModifyStructure\")] public class ModifyStructure : Migration Inheritance object Migration ModifyStructure Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/library.Server.Migrations.html": {
    "href": "api/library.Server.Migrations.html",
    "title": "Namespace library.Server.Migrations | Library",
    "summary": "Namespace library.Server.Migrations Classes ModifyStructure A base class inherited by each EF Core migration."
  },
  "api/library.Server.Models.AuthorOpenLibrary.html": {
    "href": "api/library.Server.Models.AuthorOpenLibrary.html",
    "title": "Class AuthorOpenLibrary | Library",
    "summary": "Class AuthorOpenLibrary Namespace library.Server.Models Assembly library.Server.dll public class AuthorOpenLibrary Inheritance object AuthorOpenLibrary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name public string? Name { get; set; } Property Value string Url public string? Url { get; set; } Property Value string"
  },
  "api/library.Server.Models.Book.html": {
    "href": "api/library.Server.Models.Book.html",
    "title": "Class Book | Library",
    "summary": "Class Book Namespace library.Server.Models Assembly library.Server.dll public class Book Inheritance object Book Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Book(string, string, string, string, int) public Book(string title, string author, string genre, string isbn, int copies = 1) Parameters title string author string genre string isbn string copies int Properties Author public string Author { get; set; } Property Value string BookCopies public List<BookCopy> BookCopies { get; } Property Value List<BookCopy> Copies public int Copies { get; set; } Property Value int Genre public string Genre { get; set; } Property Value string Id public int Id { get; set; } Property Value int Isbn public string Isbn { get; set; } Property Value string Title public string Title { get; set; } Property Value string"
  },
  "api/library.Server.Models.BookCopy.AvailabilityEnum.html": {
    "href": "api/library.Server.Models.BookCopy.AvailabilityEnum.html",
    "title": "Enum BookCopy.AvailabilityEnum | Library",
    "summary": "Enum BookCopy.AvailabilityEnum Namespace library.Server.Models Assembly library.Server.dll public enum BookCopy.AvailabilityEnum Fields Dostępna = 0 Wycofana = 3 Wypożyczona = 1 Zarezerwowana = 2"
  },
  "api/library.Server.Models.BookCopy.html": {
    "href": "api/library.Server.Models.BookCopy.html",
    "title": "Class BookCopy | Library",
    "summary": "Class BookCopy Namespace library.Server.Models Assembly library.Server.dll public class BookCopy Inheritance object BookCopy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BookCopy(int, AvailabilityEnum) public BookCopy(int bookId, BookCopy.AvailabilityEnum availability = AvailabilityEnum.Dostępna) Parameters bookId int availability BookCopy.AvailabilityEnum Properties Availability public BookCopy.AvailabilityEnum Availability { get; set; } Property Value BookCopy.AvailabilityEnum Book public Book Book { get; set; } Property Value Book BookId public int BookId { get; set; } Property Value int Id public int Id { get; set; } Property Value int"
  },
  "api/library.Server.Models.BookOpenLibrary.html": {
    "href": "api/library.Server.Models.BookOpenLibrary.html",
    "title": "Class BookOpenLibrary | Library",
    "summary": "Class BookOpenLibrary Namespace library.Server.Models Assembly library.Server.dll public class BookOpenLibrary Inheritance object BookOpenLibrary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BookOpenLibrary() public BookOpenLibrary() BookOpenLibrary(string, string, AuthorOpenLibrary[], string, string) public BookOpenLibrary(string id, string title, AuthorOpenLibrary[] authors, string isbn, string genre) Parameters id string title string authors AuthorOpenLibrary[] isbn string genre string Properties Authors public AuthorOpenLibrary[]? Authors { get; set; } Property Value AuthorOpenLibrary[] Genre public string? Genre { get; set; } Property Value string Id public string? Id { get; set; } Property Value string Identifiers public Dictionary<string, string[]>? Identifiers { get; set; } Property Value Dictionary<string, string[]> Isbn public string? Isbn { get; set; } Property Value string NumberOfPages public int? NumberOfPages { get; set; } Property Value int? PublishDate public string? PublishDate { get; set; } Property Value string Title public string? Title { get; set; } Property Value string"
  },
  "api/library.Server.Models.Borrow.BorrowingStatusEnum.html": {
    "href": "api/library.Server.Models.Borrow.BorrowingStatusEnum.html",
    "title": "Enum Borrow.BorrowingStatusEnum | Library",
    "summary": "Enum Borrow.BorrowingStatusEnum Namespace library.Server.Models Assembly library.Server.dll public enum Borrow.BorrowingStatusEnum Fields Wypożyczona = 0 Zwrócona = 1"
  },
  "api/library.Server.Models.Borrow.html": {
    "href": "api/library.Server.Models.Borrow.html",
    "title": "Class Borrow | Library",
    "summary": "Class Borrow Namespace library.Server.Models Assembly library.Server.dll public class Borrow Inheritance object Borrow Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BorrowMapper.MapToDto(Borrow) Constructors Borrow(DateTime, DateTime, BorrowingStatusEnum, int, int) public Borrow(DateTime borrowDate, DateTime returnDate, Borrow.BorrowingStatusEnum status, int copyId, int userId) Parameters borrowDate DateTime returnDate DateTime status Borrow.BorrowingStatusEnum copyId int userId int Properties BorrowDate public DateTime BorrowDate { get; set; } Property Value DateTime Copy public BookCopy Copy { get; set; } Property Value BookCopy CopyId public int CopyId { get; set; } Property Value int Id public int Id { get; set; } Property Value int ReturnDate public DateTime ReturnDate { get; set; } Property Value DateTime Status public Borrow.BorrowingStatusEnum Status { get; set; } Property Value Borrow.BorrowingStatusEnum User public User User { get; set; } Property Value User UserId public int UserId { get; set; } Property Value int"
  },
  "api/library.Server.Models.Log.html": {
    "href": "api/library.Server.Models.Log.html",
    "title": "Class Log | Library",
    "summary": "Class Log Namespace library.Server.Models Assembly library.Server.dll public class Log Inheritance object Log Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Log(int, string, DateTime) public Log(int userId, string action, DateTime timeStamp) Parameters userId int action string timeStamp DateTime Properties Action public string Action { get; set; } Property Value string Id public int Id { get; set; } Property Value int TimeStamp public DateTime TimeStamp { get; set; } Property Value DateTime UserId public int UserId { get; set; } Property Value int"
  },
  "api/library.Server.Models.Reservation.html": {
    "href": "api/library.Server.Models.Reservation.html",
    "title": "Class Reservation | Library",
    "summary": "Class Reservation Namespace library.Server.Models Assembly library.Server.dll public class Reservation Inheritance object Reservation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ReservationMapper.MapToDto(Reservation) Constructors Reservation(DateTime, int, int) public Reservation(DateTime reservationDate, int copyId, int userId) Parameters reservationDate DateTime copyId int userId int Properties Copy public BookCopy Copy { get; set; } Property Value BookCopy CopyId public int CopyId { get; set; } Property Value int Id public int Id { get; set; } Property Value int ReservationDate public DateTime ReservationDate { get; set; } Property Value DateTime User public User User { get; set; } Property Value User UserId public int UserId { get; set; } Property Value int"
  },
  "api/library.Server.Models.User.RoleEnum.html": {
    "href": "api/library.Server.Models.User.RoleEnum.html",
    "title": "Enum User.RoleEnum | Library",
    "summary": "Enum User.RoleEnum Namespace library.Server.Models Assembly library.Server.dll public enum User.RoleEnum Fields Admin = 2 Bibliotekarz = 1 Czytelnik = 0"
  },
  "api/library.Server.Models.User.UserStatusEnum.html": {
    "href": "api/library.Server.Models.User.UserStatusEnum.html",
    "title": "Enum User.UserStatusEnum | Library",
    "summary": "Enum User.UserStatusEnum Namespace library.Server.Models Assembly library.Server.dll public enum User.UserStatusEnum Fields Aktywny = 0 Zablokowany = 1"
  },
  "api/library.Server.Models.User.html": {
    "href": "api/library.Server.Models.User.html",
    "title": "Class User | Library",
    "summary": "Class User Namespace library.Server.Models Assembly library.Server.dll public class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors User(string, string, RoleEnum, UserStatusEnum) public User(string username, string email, User.RoleEnum role = RoleEnum.Czytelnik, User.UserStatusEnum status = UserStatusEnum.Aktywny) Parameters username string email string role User.RoleEnum status User.UserStatusEnum Properties Borrowings public List<Borrow> Borrowings { get; } Property Value List<Borrow> Email public string Email { get; set; } Property Value string Id public int Id { get; set; } Property Value int PasswordHash public byte[] PasswordHash { get; set; } Property Value byte[] PasswordSalt public byte[] PasswordSalt { get; set; } Property Value byte[] Reservations public List<Reservation> Reservations { get; } Property Value List<Reservation> Role public User.RoleEnum Role { get; set; } Property Value User.RoleEnum Status public User.UserStatusEnum Status { get; set; } Property Value User.UserStatusEnum Username public string Username { get; set; } Property Value string Methods SetPassword(string) public void SetPassword(string password) Parameters password string VerifyPassword(string) public bool VerifyPassword(string password) Parameters password string Returns bool"
  },
  "api/library.Server.Models.html": {
    "href": "api/library.Server.Models.html",
    "title": "Namespace library.Server.Models | Library",
    "summary": "Namespace library.Server.Models Classes AuthorOpenLibrary Book BookCopy BookOpenLibrary Borrow Log Reservation User Enums BookCopy.AvailabilityEnum Borrow.BorrowingStatusEnum User.RoleEnum User.UserStatusEnum"
  },
  "api/library.Server.Program.html": {
    "href": "api/library.Server.Program.html",
    "title": "Class Program | Library",
    "summary": "Class Program Namespace library.Server Assembly library.Server.dll public class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static Task Main(string[] args) Parameters args string[] Returns Task"
  },
  "api/library.Server.html": {
    "href": "api/library.Server.html",
    "title": "Namespace library.Server | Library",
    "summary": "Namespace library.Server Classes AuthService Class Program"
  },
  "articles/architecture.html": {
    "href": "articles/architecture.html",
    "title": "\uD83C\uDFD7 Architecture | Library",
    "summary": "\uD83C\uDFD7 Architecture This document describes the architecture of the Library web application. \uD83E\uDDF1 Technology Stack Layer Technology Frontend React 19, TypeScript, Vite, Tailwind CSS Backend ASP.NET Core 8.0 (Web API) Database SQLite (EF Core ORM) API Style RESTful Deployment Docker + Docker Compose \uD83D\uDCE6 Project Structure ├── library.client # React frontend (Vite, TS, Tailwind) │ └── src/ │ ├── components/ │ ├── pages/ │ └── services/ │ ├── library.Server # ASP.NET Core backend │ ├── Controllers/ │ ├── Models/ │ ├── Data/ # SQLite DB file location │ └── Services/ │ ├── docker-compose.yml # Combines frontend + backend └── Dockerfile # Builds and serves app"
  },
  "articles/getting-started.html": {
    "href": "articles/getting-started.html",
    "title": "Getting Started | Library",
    "summary": "Getting Started Prerequisites .NET 8 SDK Node.js (v20+) Docker + Docker Compose Build & Run docker-compose build docker-compose up"
  },
  "articles/overview.html": {
    "href": "articles/overview.html",
    "title": "Library – Overview | Library",
    "summary": "Library – Overview Welcome to the Library project documentation. This app is a full-stack solution using: ASP.NET 8 (backend, API) React + Vite + TypeScript (frontend) SQLite (persistence) Features: User registration & login Book listing & reservation Simple REST API"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Library",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Library",
    "summary": "Introduction"
  }
}